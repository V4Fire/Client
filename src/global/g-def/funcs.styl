/*!
 * V4Fire Client Core
 * https://github.com/V4Fire/Client
 *
 * Released under the MIT license
 * https://github.com/V4Fire/Client/blob/master/LICENSE
 */

@import "nib/size"
@import "nib/positions"
@import "nib/overflow"
@import "nib/text"
@import "nib/border-radius"
@import "nib/border"
@import "nib/image"
@import "~@pzlr/stylus-inheritance/runtime.styl"

/**
 * Global images cache
 */
$IMG = {}

/**
 * Saves the specified image to thew global cache
 * @param {string} $img
 */
img($img)
	$prop = current-property[0]
	$keys = {
		background: background-image
		background-image: background-image
	}

	// @stlint-disable

	if !$IMG[$img]
		$IMG[$img] = {
			selectors: ()
			props: {}
		}

	$obj = $IMG[$img]
	$props = $obj.props

	// @stlint-enable

	push($obj.selectors, selector())
	$props[$keys[$prop]] = true

	return

/**
 * Generates images classes
 */
generateImgClasses()
	for $img, $obj in $IMG
		$sel = join(",", $obj.selectors)
		{$sel}
			for $prop in $obj.props
				add-property($prop, "url(%s)" % $img)

/**
 * Executes the default font pattern and returns a result
 * @param {string} [$type] - advanced font type
 */
execFontPattern($type = "")
	if $type
		unquote(replace("%t", " " + $type, BASE_FONT_PATTERN))

	else
		unquote(replace("%t", "", BASE_FONT_PATTERN))

/**
 * Returns a color from the global kits
 * or from the Design System
 *
 * @param {string} $kit
 * @param {number|string} [$id]
 * @param {boolean=} [$reserved]
 * @param {boolean=} [$base]
 */
c($kit, $id = null, $reserved = false, $base = false)
	if getDSOptions("colors")
		return getDSColor($kit, $id)

	getGlobalColor($kit, $id || null, $reserved, $base)

/**
 * CSS hack for IE10-11
 */
ie10-11()
	@media all and (-ms-high-contrast none), (-ms-high-contrast active)
		{block}

/**
 * Activates GPU for render
 */
useGPU()
	transform translate3d(0, 0, 0)

/**
 * Global overlays map
 */
$OVERLAYS = ( "layer" "modal" "overall" )

/**
 * Sets a z-index for the specified layer position
 *
 * @param {string} $pos - layer variants: underall, layer, modal, overall
 * @param {number} [$mod] - value modifier
 */
zIndex($pos, $mod = 0)
	if $pos == "underall"
		z-index -1

	else
		z-index index($OVERLAYS, $pos) * 1000 + $mod

/**
 * Alias for zIndex mixin
 */
z-index-pos($pos, $mod = 0)
	zIndex($pos, $mod)

/**
 * Sets sizes dictionary
 * $flag for global: replacing global sizes
 * $flag for local: extending global sizes
 *
 * @param {Tuple} $obj
 * @param {string} $place
 * @param {boolean=} [$flag]
 */
setSizes($obj, $place, $flag = false)
	if ($place == "local")
		return getSizes($obj, $flag)

	if ($place == "global")
		return extendSizes($obj, $flag)

/**
 * Generates rules for flexbox (direction: row)
 *
 * @param {string} $justify - justify-content (def for default)
 * @param {string=} [$align] - align-items (def for default)
 */
flex-row($justify, $align = $justify)
	display flex

	if $justify != "def"
		justify-content $justify

	if $align != "def"
		align-items $align

/**
 * Generates rules for flexbox (direction: row-reverse)
 *
 * @param {string} $justify - justify-content (def for default)
 * @param {string=} [$align] - align-items (def for default)
 */
flex-row-rev($justify, $align = $justify)
	flex-row($justify, $align)
	flex-direction row-reverse

/**
 * Generates rules for flexbox (direction: column)
 *
 * @param {string} $justify - justify-content (def for default)
 * @param {string=} [$align] - align-items (def for default)
 */
flex-col($justify, $align = $justify)
	flex-row($justify, $align)
	flex-direction column

/**
 * Generates rules for flexbox (direction: column-reverse)
 *
 * @param {string} $justify - justify-content (def for default)
 * @param {string=} [$align] - align-items (def for default)
 */
flex-col-rev($justify, $align = $justify)
	flex-row($justify, $align)
	flex-direction column-reverse

/**
 * Generates rules for a stretch modal layer
 *
 * @param {string} $position - position type
 * @param {string=} [$zIndexPos] - zIndex position
 */
stretch-layer($position, $zIndexPos = "modal")
	position $position
	top 0
	left 0
	bottom 0
	right 0
	zIndex($zIndexPos)

/**
 * Generates text style rules from the Design System styles
 * @param {string} $name - text style name
 */
t($name)
	$name = replaceByRegExp($name, "[ \/]", "-", "g")
	$obj = getDSOptions("text." + $name)

	if $obj
		interpolate-props($obj)

/**
 * Returns a border-radius rule for the specified name and position
 *
 * @param {string} $name - border-radius DS name
 * @param {string} [$pos] - %s tokens-styled string for multiple border-radius values
 *
 * @example
 * r(big, '$s 0 $s') -> border-radius 16px 0 16px
 */
r($name, $pos = null)
	$val = getDSOptions("rounding." + $name)

	if $val
		if $pos
			border-radius convert(replace("%s", s("%s", $val), $pos))

		else
			border-radius $val

/**
 * Generates rules from object properties
 *
 * @param {Object} $opts
 * @param {boolean=} $normalize
 */
interpolate-props($opts, $normalize = true)
	if type($opts) == "object"
		for $key, $val in $opts
			$value = type($val) == "string" ? convert($val) : $val
			{$normalize ? dasherize($key): $key} $value

/**
 * Generates path from the specified sequence
 * @param {string[]} $arr
 */
path($arr)
	join(".", $arr)

/**
 * Generates necessary rules for specified component options and factory
 *
 * @param $p
 * @param $fn
 */
generateRules($p, $fn)
	if !$p.skipDsInheritance
		//#if runtime has ds-vars
		$fn($p.__vars__)
		//#endif

		//#unless runtime has ds-vars
		$fn($p)
		//#endunless

		//#if runtime has ds-diff
		&_diff_true
			$fn($p.__diffVars__)

		&_diff_false
			$fn($p.__vars__)
		//#endif
